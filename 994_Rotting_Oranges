class Solution {
    Set<Integer> rem = new HashSet<>();
    Queue<int[]> q = new LinkedList<>();
    public int orangesRotting(int[][] grid) {
        int r = grid.length;
        int c = grid[0].length;
        //System.out.println("r = " + r +" , c = " + c);
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                int index = i*c + j;
                if (grid[i][j] == 1) rem.add(index);
                if (grid[i][j] == 2) q.add(new int[]{i, j});
            }
        }
        int minutes = bfs(r, c, grid);
        return rem.size() == 0 ? minutes : -1;
    }
    
    int bfs(int r, int c, int[][] grid) {
        if (q.isEmpty()) return 0;
        int minutes = 0;
        int[] x_j = {0, 1, 0, -1};
        int[] y_j = {1, 0, -1, 0};
        while(!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int[] pos = q.poll();
                int x = pos[0], y = pos[1];
                rem.remove(x*c + y);
                for (int j = 0; j < 4; j++) {
                    int pos_x = x + x_j[j];
                    int pos_y = y + y_j[j];
                    if (pos_x >= 0 && pos_x < r && pos_y >= 0 && pos_y < c && grid[pos_x][pos_y] == 1) {
                        grid[pos_x][pos_y] = 2;        
                        q.add(new int[]{pos_x, pos_y});
                    }
                }
            }
            minutes += 1;
        }
        return minutes - 1;
    }
}
